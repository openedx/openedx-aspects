# Minimal makefile for Sphinx documentation
#

# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS    ?= -W
SPHINXBUILD   ?= sphinx-build
SOURCEDIR     = source
BUILDDIR      = build

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
	@awk -F ':.*?## ' '/^[a-zA-Z]/ && NF==2 {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST) | sort

.PHONY: help clean Makefile upgrade requirements dev-requirements quality selfcheck test test-all validate

# Define PIP_COMPILE_OPTS=-v to get more information during make upgrade.
PIP_COMPILE = pip-compile --upgrade $(PIP_COMPILE_OPTS)

upgrade: export CUSTOM_COMPILE_COMMAND=make upgrade
upgrade: ## update the requirements/*.txt files with the latest packages satisfying requirements/*.in
	pip install -r requirements/pip-tools.txt
	# Make sure to compile files after any other files they include!
	$(PIP_COMPILE) --allow-unsafe --rebuild -o requirements/pip.txt requirements/pip.in
	$(PIP_COMPILE) -o requirements/pip-tools.txt requirements/pip-tools.in
	pip install -r requirements/pip-tools.txt
	$(PIP_COMPILE) -o requirements/base.txt requirements/base.in
	$(PIP_COMPILE) -o requirements/docs.txt requirements/docs.in
	$(PIP_COMPILE) -o requirements/test.txt requirements/test.in
	$(PIP_COMPILE) -o requirements/quality.txt requirements/quality.in
	$(PIP_COMPILE) -o requirements/ci.txt requirements/ci.in
	$(PIP_COMPILE) -o requirements/dev.txt requirements/dev.in
	$(PIP_COMPILE) -o requirements/dbt.txt requirements/dbt.in

requirements:
	pip install -r requirements/pip-tools.txt
	pip-sync requirements/base.txt

dev-requirements:
	pip install -r requirements/pip-tools.txt
	pip-sync requirements/base.txt requirements/dev.txt requirements/dbt.txt

dbt-requirements:
	pip install -r requirements/pip-tools.txt
	pip-sync requirements/dbt.txt

quality: ## check coding style with pycodestyle and pylint
	pylint aspects/ *.py
	pycodestyle aspects  *.py
	pydocstyle aspects *.py
	isort --check-only --diff --recursive aspects *.py test_settings.py
	python setup.py bdist_wheel
	twine check dist/*
	make selfcheck

serve_docs:
	sphinx-autobuild -W docs/ docs/_build/html/

# Emulate the build step on RTD to flush out errors ahead pushing
check_docs:
	sphinx-build -T -E -W --keep-going docs/ docs/_build/html

clean: ## remove generated byte code, coverage reports, and build artifacts
	find . -name '__pycache__' -exec rm -rf {} +
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	coverage erase
	rm -fr build/
	rm -fr dist/
	rm -fr *.egg-info

test: clean ## run tests in the current virtualenv
	pytest

test-all: quality clean ## run tests on every supported Python/Django combination
	tox

validate: quality test ## run tests and quality checks

dbt-format:
	sqlfmt dbt/models dbt/macros

dbt-coverage: ## Must be run after a dbt compile or run as it needs manifest.json
	dbt-coverage compute doc --cov-fail-under 1.0

selfcheck: ## check that the Makefile is well-formed
	@echo "The Makefile is well-formed."

# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
